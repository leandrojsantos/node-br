name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  YARN_VERSION: '1.22.0'

jobs:
  # Job de qualidade de código
  lint-and-format:
    name: Lint e Formatação
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Instalar Yarn
        run: npm install -g yarn@${{ env.YARN_VERSION }}

      - name: Instalar dependências
        run: yarn install --frozen-lockfile

      - name: Executar ESLint
        run: yarn lint

      - name: Verificar formatação Prettier
        run: yarn format --check

  # Job de testes
  test:
    name: Testes
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
          MONGO_INITDB_DATABASE: nodebr_test

      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: nodebr_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Instalar Yarn
        run: npm install -g yarn@${{ env.YARN_VERSION }}

      - name: Instalar dependências
        run: yarn install --frozen-lockfile

      - name: Executar testes unitários
        run: yarn test:ci
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/nodebr_test
          POSTGRES_DB: nodebr_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          JWT_SECRET: test-secret-key

      - name: Upload coverage para Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job de build Docker
  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.event_name == 'push'
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build e push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/node-br-refactored:latest
            ${{ secrets.DOCKER_USERNAME }}/node-br-refactored:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job de deploy (apenas para branch main)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Deploy para produção
        run: |
          echo "Deploy para produção seria executado aqui"
          echo "Configurar deploy para seu provedor de nuvem preferido"
          echo "Exemplos: AWS ECS, Google Cloud Run, Azure Container Instances, etc."

  # Job de segurança
  security:
    name: Análise de Segurança
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Executar Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Job de notificação
  notify:
    name: Notificação
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build-docker]
    if: always()
    steps:
      - name: Notificar resultado
        run: |
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.lint-and-format.result }}" == "success" ]; then
            echo "✅ Pipeline executado com sucesso!"
          else
            echo "❌ Pipeline falhou!"
          fi
