import { HeroSchema } from '../schemas/heroSchema.js';

/**
 * Estrat√©gia para MongoDB usando Mongoose
 * Implementa o padr√£o Strategy para opera√ß√µes de banco de dados
 */
export class MongoStrategy {
  constructor(connection) {
    this.connection = connection;
    this.Hero = connection.model('Hero', HeroSchema);
  }

  /**
   * Verifica se a conex√£o est√° ativa
   * @returns {Promise<boolean>}
   */
  async isConnected() {
    return this.connection.readyState === 1;
  }

  /**
   * Cria um novo her√≥i
   * @param {Object} data - Dados do her√≥i
   * @returns {Promise<Object>}
   */
  async create(data) {
    try {
      console.log('üìù Criando her√≥i:', data);
      const hero = new this.Hero(data);
      const savedHero = await hero.save();
      console.log('‚úÖ Her√≥i criado:', savedHero._id);

      return {
        success: true,
        data: savedHero,
        message: 'Her√≥i criado com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao criar her√≥i:', error.message);
      throw new Error(`Erro ao criar her√≥i: ${error.message}`);
    }
  }

  /**
   * Busca her√≥is baseado em query
   * @param {Object} query - Crit√©rios de busca
   * @returns {Promise<Object>}
   */
  async read(query = {}) {
    try {
      console.log('üîç Buscando her√≥is com query:', query);
      const heroes = await this.Hero.find(query).select('-__v').lean();
      console.log('‚úÖ Her√≥is encontrados:', heroes.length);

      return {
        success: true,
        data: heroes,
        count: heroes.length,
        message: 'Her√≥is encontrados com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar her√≥is:', error.message);
      throw new Error(`Erro ao buscar her√≥is: ${error.message}`);
    }
  }

  /**
   * Atualiza um her√≥i por ID
   * @param {string} id - ID do her√≥i
   * @param {Object} data - Dados para atualiza√ß√£o
   * @returns {Promise<Object>}
   */
  async update(id, data) {
    try {
      console.log('üìù Atualizando her√≥i:', id, data);
      const hero = await this.Hero.findByIdAndUpdate(
        id,
        { ...data, updatedAt: new Date() },
        { new: true, runValidators: true }
      ).select('-__v').lean();

      if (!hero) {
        return {
          success: false,
          message: 'Her√≥i n√£o encontrado'
        };
      }

      console.log('‚úÖ Her√≥i atualizado:', hero._id);
      return {
        success: true,
        data: hero,
        message: 'Her√≥i atualizado com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao atualizar her√≥i:', error.message);
      throw new Error(`Erro ao atualizar her√≥i: ${error.message}`);
    }
  }

  /**
   * Remove um her√≥i por ID
   * @param {string} id - ID do her√≥i
   * @returns {Promise<Object>}
   */
  async delete(id) {
    try {
      console.log('üóëÔ∏è Removendo her√≥i:', id);
      const hero = await this.Hero.findByIdAndDelete(id);

      if (!hero) {
        return {
          success: false,
          message: 'Her√≥i n√£o encontrado'
        };
      }

      console.log('‚úÖ Her√≥i removido:', hero._id);
      return {
        success: true,
        message: 'Her√≥i removido com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao remover her√≥i:', error.message);
      throw new Error(`Erro ao remover her√≥i: ${error.message}`);
    }
  }

  /**
   * Busca um her√≥i por ID
   * @param {string} id - ID do her√≥i
   * @returns {Promise<Object>}
   */
  async findById(id) {
    try {
      console.log('üîç Buscando her√≥i por ID:', id);
      const hero = await this.Hero.findById(id).select('-__v').lean();

      if (!hero) {
        return {
          success: false,
          message: 'Her√≥i n√£o encontrado'
        };
      }

      console.log('‚úÖ Her√≥i encontrado:', hero._id);
      return {
        success: true,
        data: hero,
        message: 'Her√≥i encontrado com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar her√≥i:', error.message);
      throw new Error(`Erro ao buscar her√≥i: ${error.message}`);
    }
  }
}
